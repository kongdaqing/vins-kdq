%YAML:1.0

#common parameters
imu_topic: "/camera/imu"
image_topic: "/camera/infra1/image_rect_raw"
output_path: "/home/kdq/Workspace/SlamCodes/OpenSource/CatkinWs_VinsMono/src/VINS-Mono/output/"

#camera calibration 
model_type: PINHOLE
camera_name: infra1
image_width: 640
image_height: 480
distortion_parameters:
   k1: 1.5321175282915506e-02
   k2: -9.454525854549261e-03
   p1: 3.786790458075323e-04
   p2: 5.565177387057157e-04
projection_parameters:
   fx: 4.0973930564903696e+02
   fy: 4.09684664768718e+02
   cx: 3.2279100256288837e+02
   cy: 2.4187458265265235e+02

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam


extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.99995836,  0.00583946,  -0.00701206,
          -0.00576708,  0.99993034,   0.01029819, 
           0.00707171, -0.01025732,   0.99992239]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.00409381, -0.03950848, 0.0056595]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 25            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
#acc_n: 0.42         # accelerometer measurement noise standard deviation. #0.2
#gyr_n: 0.04         # gyroscope measurement noise standard deviation.     #0.05
#acc_w: 0.000835         # accelerometer bias random work noise standard deviation.  #0.02
#gyr_w: 0.000036      # gyroscope bias random work noise standard deviation.     #4.0e-5
#g_norm: 10.345       # gravity magnitude

acc_n: 0.42          # accelerometer measurement noise standard deviation. #0.2
gyr_n: 0.04         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 0.0002         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-5       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.804       #10.345       # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/kdq/Workspace/SlamCodes/OpenSource/CatkinWs_VinsMono/src/VINS-Mono/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                     # online estimate time offset between camera and imu
td: 0.000                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0              # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
